name: Sims

# Sims workflow runs multiple types of simulations (nondeterminism, import-export, after-import, multi-seed-short)
# This workflow will run on all Pull Requests, if a .go, .mod or .sum file have been changed
on:
  pull_request:
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
  push:
    branches:
      - main

env:
  LD_LIBRARY_PATH: /usr/local/lib

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  setup:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-sims')"
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.0.1
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
          SET_ENV_NAME_INSERTIONS: 1
          SET_ENV_NAME_LINES: 1
      - name: Define file prefix
        id: file-prefix
        run: echo "::set-output name=file-prefix::sim-test-${GITHUB_SHA:0:7}-${GITHUB_RUN_ATTEMPT}"
    outputs:
      should-run: ${{ env.GIT_DIFF }}
      file-prefix: ${{ steps.file-prefix.outputs.file-prefix }}
      cache-key: ${{ runner.os }}-sims-t9
      cache-path: |
        v*.tar.gz
        rocksdb-*
        ~/go/bin

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run
    steps:
      - uses: actions/checkout@v3
      - name: Output setup
        run: |
          echo "should-run:  [${{ needs.setup.outputs.should-run }}]"
          echo "file-prefix: [${{ needs.setup.outputs.file-prefix }}]"
          echo " cache-key:  [${{ needs.setup.outputs.cache-key }}]"
          echo "cache-path:  [${{ needs.setup.outputs.cache-path }}]"
      - uses: actions/cache@v3
        id: cache-setup
        with:
          key: ${{ needs.setup.outputs.cache-key }}
          path: ${{ needs.setup.outputs.cache-path }}
      - name: Install cleveldb
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y libleveldb-dev
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
      - name: Build rocksdb
        if: steps.cache-setup.outputs.cache-hit != 'true'
        # This takes a while, but is cached (and doesn't change). So if the cache was restored, skip it.
        run: |
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_INSTALL='false'
          make rocksdb
      - name: Install rocksdb
        run: |
          export ROCKSDB_SUDO='true'
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_BUILD='false'
          make rocksdb
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Display go version
        run: go version
      - name: Install runsim
        if: steps.cache-setup.outputs.cache-hit != 'true'
        # Part of the cache, so don't need to redo it if it was restored.
        run: export GO111MODULE="on" && go get github.com/cosmos/tools/cmd/runsim@v1.0.0
      - name: Build provenanced
        # Building provenanced so that, if it fails to build, you get one failure instead of 16, and saves a little github action effort.
        run: |
          make build
          build/provenanced version --long

  runsim-tests:
    # These tests are the ones that use the runsim program (see sims.mk).
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-run
    strategy:
      fail-fast: false
      matrix:
        # The test-sim-import-export test can take up to two hours.
        # The test-sim-after-import test can take even longer.
        # The test-sim-multi-seed-short test should take 30-40 minutes.
        #   "after-import" removed due to failure, but should be added back with https://github.com/provenance-io/provenance/issues/754
        test: ["import-export", "multi-seed-short"]
        db-backend: ["goleveldb", "cleveldb", "rocksdb", "badgerdb"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          key: ${{ needs.setup.outputs.cache-key }}
          path: ${{ needs.setup.outputs.cache-path }}
      - name: Install cleveldb
        if: matrix.db-backend == 'cleveldb'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y libleveldb-dev
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
      - name: Install rocksdb
        if: matrix.db-backend == 'rocksdb'
        run: |
          export ROCKSDB_SUDO='true'
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_BUILD='false'
          make rocksdb
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Display go version
        run: go version
      - name: run sim
        id: run-sim
        run: |
          test_logs="${{ needs.setup.outputs.file-prefix }}-${{ matrix.test }}-${{ matrix.db-backend }}"
          echo "::set-output name=test-logs::$test_logs"
          ec=0
          export DB_BACKEND=${{ matrix.db-backend }}
          make test-sim-${{ matrix.test }} || ec="$?"
          echo "Test exited with code $ec"
          if [[ "$ec" -ne '0' ]] && ls -d /tmp/sim-logs-*; then
            mkdir "$test_logs"
            for logdir in $( ls -d /tmp/sim-logs-* ); do
              cp -rv $logdir/* "$test_logs/" || :
            done
          fi
          exit "$ec"
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ steps.run-sim.outputs.test-logs }}
          path: ${{ steps.run-sim.outputs.test-logs }}

  go-test-multi-db:
    # These are tests that use go test to run (see sims.mk), and that we want to test using different database backends.
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-run
    strategy:
      fail-fast: false
      matrix:
        # The test-sim-simple test is pretty quick and should be able to identify glaring problems.
        # The test-sim-benchmark is handy to have for each db type.
        #   "benchmark" removed due to failure, but should be added back with https://github.com/provenance-io/provenance/issues/754
        test: ["simple"]
        db-backend: ["goleveldb", "cleveldb", "rocksdb", "badgerdb"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          key: ${{ needs.setup.outputs.cache-key }}
          path: ${{ needs.setup.outputs.cache-path }}
      - name: Install cleveldb
        if: matrix.db-backend == 'cleveldb'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y libleveldb-dev
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
      - name: Install rocksdb
        if: matrix.db-backend == 'rocksdb'
        run: |
          export ROCKSDB_SUDO='true'
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_BUILD='false'
          make rocksdb
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Display go version
        run: go version
      - name: run sim
        id: run-sim
        run: |
          test_logs="${{ needs.setup.outputs.file-prefix }}-${{ matrix.test }}-${{ matrix.db-backend }}"
          echo "::set-output name=test-logs::$test_logs"
          export DB_BACKEND=${{ matrix.db-backend }}
          make test-sim-${{ matrix.test }} | tee "$test_logs.txt"
          exit "${PIPESTATUS[0]}"
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ steps.run-sim.outputs.test-logs }}
          path: ${{ steps.run-sim.outputs.test-logs }}.txt

  go-test-single-db:
    # These are tests that use go test to run (see sims.mk), and that we don't care about testing using different database backends.
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-run
    strategy:
      fail-fast: false
      matrix:
        # The test-sim-nondeterminism test hard-codes the db backend to use memdb.
        # The test-sim-benchmark-invariants test can use different db backends, but to save resources, is down here.
        #   "benchmark-invariants" removed due to failure, but should be added back with https://github.com/provenance-io/provenance/issues/754
        test: ["nondeterminism"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          key: ${{ needs.setup.outputs.cache-key }}
          path: ${{ needs.setup.outputs.cache-path }}
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Display go version
        run: go version
      - name: run sim
        id: run-sim
        run: |
          test_logs="${{ needs.setup.outputs.file-prefix }}-${{ matrix.test }}"
          echo "::set-output name=test-logs::$test_logs"
          make test-sim-${{ matrix.test }} | tee "$test_logs.txt"
          exit "${PIPESTATUS[0]}"
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ steps.run-sim.outputs.test-logs }}
          path: ${{ steps.run-sim.outputs.test-logs }}.txt

# Sim tests that are not run in here:
#   test-sim-multi-seed-long: runsim
#     The short version does 50 blocks and takes 30-40 minutes. The long one does 500 blocks. Way too long.
#   test-sim-custom-genesis-multi-seed: runsim
#     This one requires a genesis file to be created, and I don't feel like doing that right now.
#   test-sim-custom-genesis-fast:
#     Same as test-sim-custom-genesis-multi-seed.
#   test-sim-profile:
#     This is the exact same thing as test-sim-benchmark except with a couple extra output files.
#     Unless I add an upload for them, it's not worth doing it again.
