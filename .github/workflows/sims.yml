name: Sims

# Sims workflow runs multiple types of simulations (nondeterminism, import-export, after-import, multi-seed-short)
# This workflow will run on all Pull Requests, if a .go, .mod or .sum file have been changed
on:
  pull_request:
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
  push:
    branches:
      - main

env:
  LD_LIBRARY_PATH: /usr/local/lib

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  setup:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-sims')"
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.0.1
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
          SET_ENV_NAME_INSERTIONS: 1
          SET_ENV_NAME_LINES: 1
    outputs:
      should-run: ${{ env.GIT_DIFF }}
      cache-key: ${{ runner.os }}-sims-t8
      cache-path: |
        v*.tar.gz
        rocksdb-*
        ~/go/bin

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run
    steps:
      - uses: actions/checkout@v3
      - name: Output setup
        run: |
          echo "should-run: [${{ needs.setup.outputs.should-run }}]"
          echo " cache-key: [${{ needs.setup.outputs.cache-key }}]"
          echo "cache-path: [${{ needs.setup.outputs.cache-path }}]"
      - uses: actions/cache@v3
        id: cache-setup
        with:
          key: ${{ needs.setup.outputs.cache-key }}
          path: ${{ needs.setup.outputs.cache-path }}
      - name: Install cleveldb
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y libleveldb-dev
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
      - name: Build rocksdb
        if: steps.cache-setup.outputs.cache-hit != 'true'
        # This takes a while, but is cached (and doesn't change). So if the cache was restored, skip it.
        run: |
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_INSTALL='false'
          make rocksdb
      - name: Install rocksdb
        run: |
          export ROCKSDB_SUDO='true'
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_BUILD='false'
          make rocksdb
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Display go version
        run: go version
      - name: Install runsim
        if: steps.cache-setup.outputs.cache-hit != 'true'
        # Part of the cache, so don't need to redo it if it was restored.
        run: export GO111MODULE="on" && go get github.com/cosmos/tools/cmd/runsim@v1.0.0
      - name: Build provenanced
        # Building provenanced so that, if it fails to build, you get one failure instead of 16, and saves a little github action effort.
        run: |
          make build
          build/provenanced version --long

  run-sims:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should-run
    strategy:
      fail-fast: false
      matrix:
        test: ["simple", "nondeterminism", "import-export", "multi-seed-short"]
        db-backend: ["goleveldb", "cleveldb", "rocksdb", "badgerdb"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          key: ${{ needs.setup.outputs.cache-key }}
          path: ${{ needs.setup.outputs.cache-path }}
      - name: Install cleveldb
        if: matrix.db-backend == 'cleveldb'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y libleveldb-dev
          sudo apt-get install -y libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev
      - name: Install rocksdb
        if: matrix.db-backend == 'rocksdb'
        run: |
          export ROCKSDB_SUDO='true'
          export ROCKSDB_DO_CLEANUP='false'
          export ROCKSDB_DO_BUILD='false'
          make rocksdb
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Display go version
        run: go version
      - name: run sim
        id: run-sim
        run: |
          ec=0
          export DB_BACKEND=${{ matrix.db-backend }}
          make test-sim-${{ matrix.test }} || ec="$?"
          if [[ "$ec" -ne '0' ]] && ls -d /tmp/sim-logs-*; then
            d="sim-test-${GITHUB_SHA:0:7}-${GITHUB_RUN_ATTEMPT}-${{ matrix.test }}-${{ matrix.db-backend }}"
            mkdir "$d"
            for logdir in $( ls -d /tmp/sim-logs-* ); do
              cp -r "$logdir/*" "$d/"
            done
            test_logs="$test_logs.tar.gz"
            tar -czvf "$test_logs" "$d" || exit "$ec"
            echo "::set-output name=test_logs::$test_logs"
          fi
          exit "$ec"
      - uses: actions/upload-artifact@v3
        if: failure() && ${{ steps.run-sim.outputs.test_logs }}
        with:
          name: ${{ matrix.test }}-${{ matrix.db-backend }}-logs
          path: ${{ steps.run-sim.outputs.test_logs }}
